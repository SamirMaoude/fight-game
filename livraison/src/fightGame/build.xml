<?xml version="1.0" encoding="UTF-8" ?>
<project name="fightGame" default="run" basedir=".">
    <property name="app.name"      value="fightGame" />
    <property name="app.version"   value="0.1"/>
    
    <property name="app.fullname"   value="${app.name}-${app.version}"/>
    <property name="build.home"    value="${basedir}/build"/>
    <property name="build.test.home"    value="${basedir}/build/test"/>
    <property name="dist.home"     value="${basedir}/dist"/>
    <property name="docs.home"     value="${basedir}/docs"/>
    <property name="src.home"      value="${basedir}/src"/>
    <property name="src.test.home"      value="${basedir}/test"/>
    <property name="test.report.home"      value="${basedir}/build/test/results"/>
    <property name="lib.home"      value="${basedir}/lib"/>

    <property name="javac.version"      value="1.8"/>
    <property name="javac.encoding"      value="UTF-8"/>
  
    <!-- ==================== Compile options =========================== -->
    <property name="compile.debug"       value="true"/>
    <property name="compile.deprecation" value="false"/>
    <property name="compile.optimize"    value="true"/>

    <available classname="org.junit.runner.Runner" property="junit.installed"/>

    <!-- ==================== Compilation Classpath =========================== -->
    <path id="compile.classpath">
        <fileset dir="${lib.home}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- ==================== All Target ====================================== -->
    <target name="all" depends="clean,compile" description="Clean build and dist directories, then compile"/>

    <!-- ==================== Clean Target ==================================== -->
    <target name="clean" description="Delete old build and dist directories">
        <delete dir="${build.home}"/>
        <delete dir="${build.test.home}"/>
        <delete dir="${dist.home}"/>
        <delete dir="${test.report.home}"/>
    </target>

    <target name="clean_all" depends="clean" description="Delete old build, dist and lib directories">
        <delete dir="${lib.home}"/>
    </target>

    <!-- ==================== Prepare Target ================================== -->
    <target name="prepare">
        <mkdir dir="${build.home}"/>
        <mkdir dir="${build.test.home}" />
        <mkdir dir="${dist.home}"/>
        <mkdir dir="${test.report.home}"/>
    </target>
  
    <!-- ==================== Compile Target ================================== -->
    <target name="compile" depends="prepare,install-junit" description="Compile Java sources">
        <javac srcdir="${src.home}"
               destdir="${build.home}"
               debug="${compile.debug}"
               deprecation="${compile.deprecation}"
               optimize="${compile.optimize}"
               includeantruntime="false"
               source="${javac.version}" 
               encoding="${javac.encoding}">
            <classpath refid="compile.classpath"/>
        </javac>

        <javac srcdir="${src.test.home}" destdir="${build.test.home}" includeantruntime="false"> 
            <classpath>
                <pathelement location="${build.home}"/>
                <path refid="compile.classpath"/>
            </classpath>
        </javac> 

        <!-- Copy application resources -->
        <copy todir="${build.home}">
            <fileset dir="${src.home}" excludes="**/*.java"/>
        </copy>
    </target>

    <!-- ==================== Dist Target ===================================== -->
    <target name="dist" depends="clean,compile,javadoc" description="Create binary distribution">
        <copy  todir="${dist.home}/lib">
            <fileset dir="${lib.home}"/>
        </copy>

        <!-- Create application JAR file -->
        <jar jarfile="${dist.home}/${app.fullname}.jar"
             basedir="${build.home}">
            <manifest>
                <attribute name="Main-Class" value="fightGame.MainClass"/>
                <attribute name="Class-Path" value="lib/gamePlayers-0.1.jar" />
            </manifest>
        </jar>

        <!-- Attention : copie ad-hoc pour envoyer le jar directement Ã  la racine -->
        <copy file="${dist.home}/${app.fullname}.jar" todir="${basedir}/../../dist" />
    </target>
  
    <!-- ==================== Javadoc Target ================================== -->
    <target name="javadoc" depends="compile" description="Create Javadoc API documentation">
        <mkdir dir="${dist.home}/docs/api"/>
		
        <javadoc sourcepath="${src.home}"
                 destdir="${dist.home}/docs/api"
                 packagenames="*">
            <classpath>
                <path refid="compile.classpath"/>
            </classpath>
        </javadoc>
    </target>

    <!-- ==================== Run Target ================================== -->
    <target name="run" depends="dist">
        <java jar="${dist.home}/${app.fullname}.jar" fork="true" />
    </target>
	
    <!-- ==================== Test Target ===================================== -->
    <target name="check-junit-installed">
        <available property="file.exists" file="${lib.home}/ant-junit.jar"/>
    </target>

    <target name="install-junit" depends="check-junit-installed" description="Install junit" unless="file.exists">
        <mkdir dir="${lib.home}"/>

        <get dest="${lib.home}/ant-junit.jar" src="https://repo1.maven.org/maven2/org/apache/ant/ant-junit/1.10.15/ant-junit-1.10.15.jar"/>
        <get dest="${lib.home}/junit.jar" src="https://repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar"/>
        
        <fail message="The JUnit dependencies have been installed. Please rerun your command and specify -lib lib/ant-junit.jar/ to ant command." unless="file.exists" />
    </target>

    <target name="test" depends="clean,compile,dist">
        <junit fork="true" printsummary="withOutAndErr" haltonfailure="false" showoutput="true" logfailedtests="true">
            <classpath>
                <path refid="compile.classpath"/>
                <pathelement location="${build.test.home}"/>
                <pathelement location="${build.home}"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest todir="${test.report.home}">
                <fileset dir="${build.test.home}" includes="**/*.class"/>
            </batchtest>
        </junit>
    </target>

    <target name="junitreport" depends="test">
        <junitreport todir="${test.report.home}">
            <fileset dir="${test.report.home}" includes="TEST-*.xml"/>
            <report todir="${test.report.home}"/>
        </junitreport>
    </target>
	
</project>
